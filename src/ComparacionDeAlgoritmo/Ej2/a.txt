Describir los algoritmos de selección, inserción, burbujeo..

Burbujeo el algoritmo de burbujeo lo que hace es agarra el primer y segundo numero del arreglo. Si el segundo es menor al
primero los cambia de lugar, luego lo mismo con el segundo y tercer numero etc hasta llegar hasta el ultimo del arreglo.
Ej:
Example:
First Pass:
( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.


El algoritmo de seleccion es tomar el elemento minimo del arreglo y remplazar por el primero, luego pasa a la segunda posicion
y sigue intercambiando las posiciones de los elementos mas chicos con los siguientes.

arr[] = 64 25 12 22 11

// Find the minimum element in arr[0...4]
// and place it at beginning
11 25 12 22 64

// Find the minimum element in arr[1...4]
// and place it at beginning of arr[1...4]
11 12 25 22 64

// Find the minimum element in arr[2...4]
// and place it at beginning of arr[2...4]
11 12 22 25 64

// Find the minimum element in arr[3...4]
// and place it at beginning of arr[3...4]
11 12 22 25 64


Algoritmo de Insercion
El método de ordenación por inserción consiste en recorrer el array comenzando desde el segundo elemento hasta el final.
Para cada elemento, se lo coloca en el lugar correcto entre todos los elementos anteriores a él, o sea, entre los elementos a su izquierda en el array.

d)Temas afines:


Another Example:
12, 11, 13, 5, 6
Let us loop for i = 1 (second element of the array) to 4 (last element of the array)
i = 1. Since 11 is smaller than 12, move 12 and insert 11 before 12
11, 12, 13, 5, 6
i = 2. 13 will remain at its position as all elements in A[0..I-1] are smaller than 13
11, 12, 13, 5, 6
i = 3. 5 will move to the beginning and all other elements from 11 to 13 will move one position ahead of their current position.
5, 11, 12, 13, 6
i = 4. 6 will move to position after 5, and elements from 11 to 13 will move one position ahead of their current position.
5, 6, 11, 12, 13



